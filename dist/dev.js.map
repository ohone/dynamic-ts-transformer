{"version":3,"file":"dev.js","sourceRoot":"","sources":["../src/dev.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,YAAY,CAAC;AACjD,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,UAAU,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IACpD,MAAM,EAAE,GAAG;;;;GAIV,CAAC;IAEF,MAAM,KAAK,GAAG;;;;;;;;;;;;;;;;MAgBV,CAAC;IAEH,MAAM,SAAS,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAsIjB,CAAC;IACJ,MAAM,MAAM,GAAG,MAAM,mBAAmB,CACtC,EAAE,EACF,8BAA8B,EAC9B,CAAC,QAAQ,EAAE,UAAU,CAAC,EACtB,IAAI,CACL,CAAC;IAEF,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;IAChD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACtB,CAAC;AAED;;;;EAIE","sourcesContent":["import { transpileTypescript } from \"./index.js\";\nif (import.meta.url === `file://${process.argv[1]}`) {\n  const i1 = `\n      return (async function() {\n        // Create container\n        const container = document.something.createElement('div');\n})`;\n\n  const input = `function isUsefulNode(node) {\n        if (node.nodeType === Node.TEXT_NODE) {\n            // Keep non-empty text nodes\n            return node.nodeValue.trim().length > 0;\n        }\n        if (node.nodeType === Node.ELEMENT_NODE) {\n            // Exclude <script>, <img>, and <style> elements\n            const tagName = node.tagName.toLowerCase();\n            const excludedTags = ['script', 'img', 'style', 'iframe', 'embed', 'button', 'input'];\n            return !excludedTags.includes(tagName);\n        }\n        // Exclude comment nodes\n        if (node.nodeType === Node.COMMENT_NODE) {\n            return false;\n        }\n        return false;\n    }`;\n\n    const fullInput = `\n//\n//\n\n    return (async function() {\n    // Create container\nconst container = document.createElement('div');\ncontainer.id = 'floating-input-container';\ncontainer.style.cssText = \\`\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        z-index: 2147483647;\n        background-color: white;\n        padding: 10px;\n        box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    \\`;\n\n// Create input\nconst input = document.createElement('input');\ninput.type = 'text';\ninput.id = 'floating-input';\ninput.placeholder = 'Enter text here...';\ninput.style.cssText = \\`\n        width: 80%;\n        max-width: 600px;\n        padding: 8px;\n        border: 1px solid #ccc;\n        border-radius: 4px;\n        font-size: 14px;\n    \\`;\n\ninput.addEventListener('keypress', async (event: KeyboardEvent) => {\n  if (event.key === 'Enter') {\n    // Create and dispatch custom event with input value\n    const searchTerm = input.value;\n\n    const event = new CustomEvent('chatgpt_prompt', {\n        detail: searchTerm \n    });\n\n    const myWindow = window;\n    myWindow.dispatchEvent(event);\n    \n    const systemPrompt = ''\n    const dom = minimizeDOM();\n\n\n    console.log(dom);\n    \n    // Clear input after dispatch\n    input.value = '';\n  }\n});\n\n// Append elements\ncontainer.appendChild(input);\ndocument.body.insertBefore(container, document.body.firstChild);\n\n// Adjust page content to prevent overlap\ndocument.body.style.marginTop =\n    (container.offsetHeight + parseInt(container.style.padding) * 2) + 'px';\n\nfunction minimizeDOM() {\n    function isUsefulNode(node) {\n        if (node.nodeType === Node.TEXT_NODE) {\n            // Keep non-empty text nodes\n            return node.nodeValue.trim().length > 0;\n        }\n        if (node.nodeType === Node.ELEMENT_NODE) {\n            // Exclude <script>, <img>, and <style> elements\n            const tagName = node.tagName.toLowerCase();\n            const excludedTags = ['script', 'img', 'style', 'iframe', 'embed', 'button', 'input'];\n            return !excludedTags.includes(tagName);\n        }\n        // Exclude comment nodes\n        if (node.nodeType === Node.COMMENT_NODE) {\n            return false;\n        }\n        return false;\n    }\n\n    function cloneNodeWithIdAndClass(node) {\n        if (!isUsefulNode(node)) {\n            return null;\n        }\n\n        const newNode = node.cloneNode(false);\n\n        // Retain id, class, and data- attributes\n        if (node.nodeType === Node.ELEMENT_NODE) {\n            if (node.id) newNode.setAttribute('id', node.id);\n            if (node.className) newNode.setAttribute('class', node.className);\n\n            // Retain data- attributes\n            for (let i = 0; i < node.attributes.length; i++) {\n                let attr = node.attributes[i];\n                if (attr.name.startsWith('data-')) {\n                    newNode.setAttribute(attr.name, attr.value);\n                }\n            }\n        }\n\n        // Remove all other attributes\n        if (newNode.attributes) {\n            for (let attr of [...newNode.attributes]) {\n                if (attr.name !== 'id' && attr.name !== 'class' && !attr.name.startsWith('data-')) {\n                    newNode.removeAttribute(attr.name);\n                }\n            }\n        }\n\n        for (let child of node.childNodes) {\n            const filteredChild = cloneNodeWithIdAndClass(child);\n            if (filteredChild) {\n                newNode.appendChild(filteredChild);\n            }\n        }\n        return newNode;\n    }\n\n\n    const minimizedDoc = document.implementation.createHTMLDocument('');\n    const minimizedBody = cloneNodeWithIdAndClass(document.body);\n    if (minimizedBody) {\n        minimizedDoc.body.appendChild(minimizedBody);\n    }\n    return minimizedDoc.documentElement.outerHTML;\n}\n  })()\n    `;\n  const result = await transpileTypescript(\n    i1,\n    \"http://localhost:8080/dev.ts\",\n    [\"window\", \"document\"],\n    true\n  );\n\n  console.log(\"--------------------------------\");\n  console.log(result);\n}\n\n/*\n    const input = document.createElement(\"input\");\n    window.addEventListener(\"message\", (event) => {\n      const b = input.value;\n*/\n"]}