{"version":3,"file":"Transpiler.js","sourceRoot":"","sources":["../src/Transpiler.ts"],"names":[],"mappings":"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","sourcesContent":["import ts, { isCallExpression } from \"typescript\";\nimport { getTypeDefinitions } from \"./generated/type-definitions.js\";\n\nconst runtimeTypes: Record<string, (names: string[]) => string> = {\n  \"node_modules/my-runtime-types.d.ts\": getTypeDefinitions,\n};\n\nexport async function transpileTypescript(\n  codeString: string,\n  sourceUrl: string,\n  globalMockNames: string[]\n) {\n  const typeChecker = await createTypeChecker(codeString, globalMockNames);\n  const { outputText } = ts.transpileModule(\n    `//\\n//\\n` +\n      codeString,\n    {\n      compilerOptions: {\n        module: ts.ModuleKind.ES2022,\n        target: ts.ScriptTarget.ES2023,\n        inlineSourceMap: true, //Disabled for now, as the maps were mangled, happy to use JS debugging for now\n        inlineSources: true,\n        sourceMap: true,\n      },\n      fileName: sourceUrl,\n      transformers: {\n        before: [createTransformer(typeChecker)],\n      },\n    }\n  );\n\n  // WHY ??\n  // the map files are off by 2, so we added two comment lines before transpiling\n  // we then trim those lines before gen of dynamic function, so that we correct the off by 2\n  return (\n    outputText.split(\"\\n\").slice(2).join(\"\\n\") + \"\\n//# sourceURL=\" + sourceUrl\n  );\n}\n\nasync function createInMemoryCompilerHost(\n  sourceCode: string,\n  globalMockNames: string[]\n): Promise<ts.CompilerHost> {\n  const sourceFile = ts.createSourceFile(\n    \"input.ts\",\n    sourceCode,\n    ts.ScriptTarget.Latest,\n    true\n  );\n\n  return {\n    getSourceFile: (fileName: string, languageVersion: ts.ScriptTarget) => {\n      if (fileName === \"input.ts\") {\n        return sourceFile;\n      }\n      if (runtimeTypes[fileName] !== undefined) {\n        console.log(\"Loading lib file:\", fileName);\n        return ts.createSourceFile(\n          fileName,\n          runtimeTypes[fileName](globalMockNames),\n          languageVersion\n        );\n      }\n      console.warn(\"[getFileSource]File does not exist:\", fileName);\n      return undefined;\n    },\n    writeFile: () => {},\n    getDefaultLibFileName: () => \"lib.d.ts\",\n    useCaseSensitiveFileNames: () => false,\n    getCanonicalFileName: (fileName) => fileName,\n    getCurrentDirectory: () => \"\",\n    getNewLine: () => \"\\n\",\n    getDirectories: () => [],\n    fileExists: (fileName: string) => {\n      if (fileName === \"input.ts\") {\n        return true;\n      }\n      if (runtimeTypes[fileName] !== undefined) {\n        console.log(\"Checking for lib file:\", fileName);\n        return true;\n      }\n\n      console.warn(\"[fileExists]File does not exist:\", fileName);\n      return false;\n    },\n    readFile: (fileName: string) => {\n      if (fileName === \"input.ts\") {\n        return sourceCode;\n      }\n      if (runtimeTypes[fileName] !== undefined) {\n        console.log(\"Reading lib file:\", fileName);\n        return runtimeTypes[fileName](globalMockNames);\n      }\n      console.warn(\"[readFile]File does not exist:\", fileName);\n      return undefined;\n    },\n  };\n}\n\nfunction createTransformer(\n  typeChecker: ts.TypeChecker\n): ts.TransformerFactory<ts.SourceFile> {\n  return (context) => {\n    const visit: ts.Visitor = (node: ts.Node): ts.Node => {\n      if (\n        ts.isPropertyAccessExpression(node) ||\n        ts.isElementAccessExpression(node)\n      ) {\n        const type = typeChecker.getTypeAtLocation(node.expression);\n        if (type?.symbol !== undefined) {\n          console.log(\"visited type:\", type?.symbol);\n        }\n        if (isRipulTransformedType(type)) {\n          console.log(\"Found ripul type\", type);\n          return ts.factory.createAwaitExpression(node);\n        }\n      }\n\n      if (isCallExpression(node)) {\n        const expressionType = typeChecker.getTypeAtLocation(node);\n        if (isRipulTransformedType(expressionType)) {\n          console.log(\"Found ripul type\", expressionType);\n          return ts.factory.createAwaitExpression(node);\n        }\n      }\n\n      return ts.visitEachChild(node, visit, context);\n    };\n\n    function isRipulTransformedType(type: ts.Type): boolean {\n      if (type.symbol?.name === \"AsyncMock\") {\n        console.log(type.symbol.name);\n        return true;\n      }\n      return false;\n    }\n\n    return (sourceFile) => ts.visitNode(sourceFile, visit) as ts.SourceFile;\n  };\n}\n\nfunction createProgram(compilerHost: ts.CompilerHost) {\n  // Create a program to trigger lib loading\n  const program = ts.createProgram({\n    rootNames: [\"input.ts\"],\n    options: {\n      types: [\"my-runtime-types\"],\n      target: ts.ScriptTarget.ESNext,\n    },\n    host: compilerHost,\n  });\n  return program;\n}\n\nasync function createTypeChecker(sourceCode: string, globalObjectNames: string[]): Promise<ts.TypeChecker> {\n  const compilerHost = await createInMemoryCompilerHost(sourceCode, globalObjectNames);\n  const program = createProgram(compilerHost);\n  return program.getTypeChecker();\n}\n"]}