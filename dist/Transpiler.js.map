{"version":3,"file":"Transpiler.js","sourceRoot":"","sources":["../src/Transpiler.ts"],"names":[],"mappings":"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","sourcesContent":["import ts, { isCallExpression } from \"typescript\";\nimport { getTypeDefinitions } from \"./generated/type-definitions.js\";\n\nconst runtimeTypes: Record<string, (names: string[], debug: boolean) => string> = {\n  \"node_modules/my-runtime-types.d.ts\": getTypeDefinitions,\n};\n\nexport async function transpileTypescript(\n  codeString: string,\n  sourceUrl: string,\n  globalMockNames: string[],\n  debug: boolean = false\n) {\n  const typeChecker = await createTypeChecker(codeString, globalMockNames, debug);\n  const { outputText } = ts.transpileModule(`//\\n//\\n` + codeString, {\n    compilerOptions: {\n      module: ts.ModuleKind.ES2022,\n      target: ts.ScriptTarget.ES2023,\n      inlineSourceMap: true, //Disabled for now, as the maps were mangled, happy to use JS debugging for now\n      inlineSources: true,\n      sourceMap: true,\n    },\n    fileName: sourceUrl,\n    transformers: {\n      before: [createTransformer(typeChecker, debug)],\n    },\n  });\n\n  // WHY ??\n  // the map files are off by 2, so we added two comment lines before transpiling\n  // we then trim those lines before gen of dynamic function, so that we correct the off by 2\n  return (\n    outputText.split(\"\\n\").slice(2).join(\"\\n\") + \"\\n//# sourceURL=\" + sourceUrl\n  );\n}\n\nasync function createInMemoryCompilerHost(\n  sourceCode: string,\n  globalMockNames: string[],\n  debug: boolean = false\n): Promise<ts.CompilerHost> {\n  const sourceFile = ts.createSourceFile(\n    \"input.ts\",\n    sourceCode,\n    ts.ScriptTarget.Latest,\n    true\n  );\n\n  return {\n    getSourceFile: (fileName: string, languageVersion: ts.ScriptTarget) => {\n      if (fileName === \"input.ts\") {\n        return sourceFile;\n      }\n      if (runtimeTypes[fileName] !== undefined) {\n        debug && console.log(\"Loading lib file:\", fileName);\n        return ts.createSourceFile(\n          fileName,\n          runtimeTypes[fileName](globalMockNames, debug),\n          languageVersion\n        );\n      }\n      debug && console.warn(\"[getFileSource]File does not exist:\", fileName);\n      return undefined;\n    },\n    writeFile: () => {},\n    getDefaultLibFileName: () => \"lib.d.ts\",\n    useCaseSensitiveFileNames: () => false,\n    getCanonicalFileName: (fileName) => fileName,\n    getCurrentDirectory: () => \"\",\n    getNewLine: () => \"\\n\",\n    getDirectories: () => [],\n    fileExists: (fileName: string) => {\n      if (fileName === \"input.ts\") {\n        return true;\n      }\n      if (runtimeTypes[fileName] !== undefined) {\n        debug && console.log(\"Checking for lib file:\", fileName);\n        return true;\n      }\n\n      debug && console.warn(\"[fileExists]File does not exist:\", fileName);\n      return false;\n    },\n    readFile: (fileName: string) => {\n      if (fileName === \"input.ts\") {\n        return sourceCode;\n      }\n      if (runtimeTypes[fileName] !== undefined) {\n        debug && console.log(\"Reading lib file:\", fileName);\n        return runtimeTypes[fileName](globalMockNames, debug);\n      }\n      debug && console.warn(\"[readFile]File does not exist:\", fileName);\n      return undefined;\n    },\n  };\n}\n\nfunction createTransformer(\n  typeChecker: ts.TypeChecker,\n  debug: boolean\n): ts.TransformerFactory<ts.SourceFile> {\n  return (context) => {\n    const visit: ts.Visitor = (node: ts.Node): ts.Node => {\n      debug && console.log(`Visiting node: ${node.getText()}`, node);\n\n      // Handle property access expressions\n      if (ts.isPropertyAccessExpression(node)) {\n        debug && console.log(\"Visiting property access:\", node);\n        const expressionType = typeChecker.getTypeAtLocation(node.expression);\n        const expressionSymbol = typeChecker.getSymbolAtLocation(node.expression);\n        debug && console.log(\"Property access expression type:\", expressionType);\n        debug && console.log(\"Property access expression symbol:\", expressionSymbol);\n        \n        // Get the declaration of the identifier\n        if (ts.isIdentifier(node.expression)) {\n          const symbol = typeChecker.getSymbolAtLocation(node.expression);\n          if (symbol?.declarations?.[0]) {\n            const declType = typeChecker.getTypeAtLocation(symbol.declarations[0]);\n            debug && console.log(\"Declaration type:\", declType);\n            if (isRipulTransformedType(declType)) {\n              debug && console.log(\"Found AsyncMock type in property access via declaration\");\n              return ts.factory.createAwaitExpression(node);\n            }\n          }\n        }\n\n        if (isRipulTransformedType(expressionType)) {\n          debug && console.log(\"Found AsyncMock type in property access\", expressionType);\n          return ts.factory.createAwaitExpression(node);\n        }\n      }\n\n      // Handle variable declarations\n      if (ts.isVariableDeclaration(node)) {\n        debug && console.log(\"Variable declaration:\", node.getText());\n        if (node.initializer) {\n          const initializerType = typeChecker.getTypeAtLocation(node.initializer);\n          const variableType = typeChecker.getTypeAtLocation(node);\n          debug && console.log(\"Initializer type:\", initializerType);\n          debug && console.log(\"Variable type:\", variableType);\n          \n          // Store the type information in the symbol table\n          if (ts.isIdentifier(node.name)) {\n            const symbol = typeChecker.getSymbolAtLocation(node.name);\n            if (symbol && isRipulTransformedType(initializerType)) {\n              debug && console.log(\"Marking variable as AsyncMock:\", node.name.getText());\n              // You might need to modify your type checker to store this information\n            }\n          }\n        }\n      }\n\n      // Handle call expressions\n      if (ts.isCallExpression(node)) {\n        debug && console.log(\"Visiting call expression:\", node);\n        // Check the base object type (e.g., 'document' in document.querySelector)\n        const baseObj = getBaseObject(node.expression);\n        const baseObjType = baseObj && typeChecker.getTypeAtLocation(baseObj);\n        \n        if (baseObjType && isRipulTransformedType(baseObjType)) {\n          debug && console.log(\"Found ripul type in base object of call expression\", baseObjType);\n          return ts.factory.createAwaitExpression(node);\n        }\n\n        const expressionType = typeChecker.getTypeAtLocation(node.expression);\n        debug && console.log(\"expressionType:\", expressionType.symbol);\n        if (isRipulTransformedType(expressionType)) {\n          debug && console.log(\"Found ripul type in call expression\", expressionType);\n          return ts.factory.createAwaitExpression(node);\n        }\n      }\n\n      return ts.visitEachChild(node, visit, context);\n    };\n\n    // Helper function to get the base object of a property access chain\n    function getBaseObject(node: ts.Node): ts.Node | undefined {\n      if (ts.isPropertyAccessExpression(node)) {\n        return getBaseObject(node.expression);\n      }\n      if (ts.isCallExpression(node)) {\n        return getBaseObject(node.expression);\n      }\n      return node;\n    }\n\n    function isRipulTransformedType(type: ts.Type): boolean {\n      debug && console.log(\"Checking type:\", type);\n      \n      if (!type) return false;\n      // Check for error types\n      if (type.flags & ts.TypeFlags.Any || type.flags & ts.TypeFlags.Unknown) {\n        debug && console.log(\"Found error or any type\");\n        return false;\n      }\n\n      // Check if it's a Promise<AsyncMock>\n      if (type.symbol?.name === \"Promise\") {\n        const typeArguments = type.aliasTypeArguments || (type as any).typeArguments;\n        if (typeArguments && typeArguments.length > 0) {\n          return isRipulTransformedType(typeArguments[0]);\n        }\n      }\n\n      // Direct AsyncMock check\n      if (type.symbol?.name === \"AsyncMock\") {\n        return true;\n      }\n\n      // Check if it's a property of AsyncMock\n      const parentType = (type as any).parent;\n      if (parentType?.symbol?.name === \"AsyncMock\") {\n        return true;\n      }\n\n      // Check if it's a union type\n      if (type.flags & ts.TypeFlags.Union) {\n        const unionType = type as ts.UnionType;\n        return unionType.types.some(t => isRipulTransformedType(t));\n      }\n\n      return false;\n    }\n\n    return (sourceFile) => ts.visitNode(sourceFile, visit) as ts.SourceFile;\n  };\n}\n\nfunction createProgram(compilerHost: ts.CompilerHost) {\n  // Create a program to trigger lib loading\n  const program = ts.createProgram({\n    rootNames: [\"input.ts\"],\n    options: {\n      types: [\"my-runtime-types\"],\n      target: ts.ScriptTarget.ESNext,\n    },\n    host: compilerHost,\n  });\n  return program;\n}\n\nasync function createTypeChecker(\n  sourceCode: string,\n  globalObjectNames: string[],\n  debug: boolean\n): Promise<ts.TypeChecker> {\n  const compilerHost = await createInMemoryCompilerHost(\n    sourceCode,\n    globalObjectNames,\n    debug\n  );\n  const program = createProgram(compilerHost);\n  return program.getTypeChecker();\n}\n"]}