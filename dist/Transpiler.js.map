{"version":3,"file":"Transpiler.js","sourceRoot":"","sources":["../src/Transpiler.ts"],"names":[],"mappings":"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","sourcesContent":["import ts from \"typescript\";\nimport { getTypeDefinitions } from \"./type-definitions.js\";\n\nconst runtimeTypes: Record<\n  string,\n  (names: string[], debug: boolean) => string\n> = {\n  \"node_modules/my-runtime-types.d.ts\": getTypeDefinitions,\n};\n\nexport async function transpileTypescript(\n  codeString: string,\n  sourceUrl?: string | undefined,\n  globalMockNames: string[] = [],\n  debug: boolean = false\n) {\n  const typeChecker = await createTypeChecker(\n    codeString,\n    globalMockNames,\n    debug\n  );\n  const { outputText } = ts.transpileModule(`//\\n//\\n` + codeString, {\n    compilerOptions: {\n      module: ts.ModuleKind.ES2022,\n      target: ts.ScriptTarget.ES2023,\n      inlineSourceMap: true, //Disabled for now, as the maps were mangled, happy to use JS debugging for now\n      inlineSources: true,\n      sourceMap: true,\n    },\n    fileName: sourceUrl,\n    transformers: {\n      before: [createTransformer(typeChecker, debug)],\n    },\n  });\n\n  // WHY ??\n  // the map files are off by 2, so we added two comment lines before transpiling\n  // we then trim those lines before gen of dynamic function, so that we correct the off by 2\n  return (\n    outputText.split(\"\\n\").slice(2).join(\"\\n\") + \"\\n//# sourceURL=\" + sourceUrl\n  );\n}\n\nasync function createInMemoryCompilerHost(\n  sourceCode: string,\n  globalMockNames: string[],\n  debug: boolean = false\n): Promise<ts.CompilerHost> {\n  const sourceFile = ts.createSourceFile(\n    \"input.ts\",\n    sourceCode,\n    ts.ScriptTarget.Latest,\n    true\n  );\n\n  return {\n    getSourceFile: (fileName: string, languageVersion: ts.ScriptTarget) => {\n      if (fileName === \"input.ts\") {\n        return sourceFile;\n      }\n      if (runtimeTypes[fileName] !== undefined) {\n        debug && console.log(\"Loading lib file:\", fileName);\n        return ts.createSourceFile(\n          fileName,\n          runtimeTypes[fileName](globalMockNames, debug),\n          languageVersion\n        );\n      }\n      debug && console.warn(\"[getFileSource]File does not exist:\", fileName);\n      return undefined;\n    },\n    writeFile: () => {},\n    getDefaultLibFileName: () => \"lib.d.ts\",\n    useCaseSensitiveFileNames: () => false,\n    getCanonicalFileName: (fileName) => fileName,\n    getCurrentDirectory: () => \"\",\n    getNewLine: () => \"\\n\",\n    getDirectories: () => [],\n    fileExists: (fileName: string) => {\n      if (fileName === \"input.ts\") {\n        return true;\n      }\n      if (runtimeTypes[fileName] !== undefined) {\n        debug && console.log(\"Checking for lib file:\", fileName);\n        return true;\n      }\n\n      debug && console.warn(\"[fileExists]File does not exist:\", fileName);\n      return false;\n    },\n    readFile: (fileName: string) => {\n      if (fileName === \"input.ts\") {\n        return sourceCode;\n      }\n      if (runtimeTypes[fileName] !== undefined) {\n        debug && console.log(\"Reading lib file:\", fileName);\n        return runtimeTypes[fileName](globalMockNames, debug);\n      }\n      debug && console.warn(\"[readFile]File does not exist:\", fileName);\n      return undefined;\n    },\n  };\n}\n\nconst getPrinter = (() => {\n  let printer: ts.Printer | undefined = undefined;\n  return () => printer ??= ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });\n})();\n\nconst printNode = (node: ts.Node, debug: boolean) =>\n  debug &&\n  console.log(\n    getPrinter().printNode(ts.EmitHint.Unspecified, node, node.getSourceFile())\n  );\n\nfunction createTransformer(\n  typeChecker: ts.TypeChecker,\n  debug: boolean\n): ts.TransformerFactory<ts.SourceFile> {\n  return (context) => {\n    const visit: ts.Visitor = (node: ts.Node): ts.Node => {\n      printNode(node, debug);\n\n      // Handle property access and call expressions\n      if (ts.isPropertyAccessExpression(node) || ts.isCallExpression(node)) {\n        let leftmostExp = node;\n        while (\n          ts.isPropertyAccessExpression(leftmostExp.expression) ||\n          ts.isCallExpression(leftmostExp.expression)\n        ) {\n          leftmostExp = leftmostExp.expression;\n        }\n\n        const baseType = typeChecker.getTypeAtLocation(leftmostExp.expression);\n\n        if (isAsyncMockType(baseType)) {\n          if (ts.isCallExpression(node)) {\n            const visitedExpression = ts.visitNode(\n              node.expression,\n              visit\n            ) as ts.Expression;\n\n            printNode(visitedExpression, debug);\n\n            const callExpression = ts.factory.createCallExpression(\n              visitedExpression,\n              node.typeArguments,\n              node.arguments\n            );\n\n            printNode(callExpression, debug);\n\n            const parenthesizedExpression =\n              ts.factory.createParenthesizedExpression(callExpression);\n\n            printNode(parenthesizedExpression, debug);\n\n            const result = ts.factory.createAwaitExpression(\n              parenthesizedExpression\n            );\n\n            printNode(result, debug);\n            return result;\n          } else {\n            // Only transform property access if we're accessing a property of an AsyncMock result\n            const parent = node.parent;\n            if (!ts.isCallExpression(parent)) {\n              // If this property isn't being called directly, transform it to a call\n              const transformedExpression = ts.visitNode(\n                node.expression,\n                visit\n              ) as ts.Expression;\n\n              printNode(transformedExpression, debug);\n\n              const propertyAccess = ts.factory.createPropertyAccessExpression(\n                transformedExpression,\n                node.name\n              );\n\n              printNode(propertyAccess, debug);\n\n              const functionCall = ts.factory.createCallExpression(\n                propertyAccess,\n                undefined,\n                []\n              );\n\n              printNode(functionCall, debug);\n\n              const awaitExp = ts.factory.createAwaitExpression(\n                functionCall\n                //ts.factory.createParenthesizedExpression(functionCall)\n              );\n\n              printNode(awaitExp, debug);\n              return awaitExp;\n            }\n          }\n        }\n      }\n\n      // Handle variable declarations\n      if (\n        ts.isBinaryExpression(node) &&\n        node.operatorToken.kind === ts.SyntaxKind.EqualsToken\n      ) {\n        let leftmostExp = node.left;\n        while (\n          ts.isPropertyAccessExpression(leftmostExp) ||\n          ts.isCallExpression(leftmostExp)\n        ) {\n          leftmostExp = leftmostExp.expression;\n        }\n\n        const baseType = typeChecker.getTypeAtLocation(leftmostExp);\n        if (isAsyncMockType(baseType)) {\n          const transformedLeftSide = ts.visitNode(\n            node.left,\n            visit\n          ) as ts.Expression;\n\n          const transformedRightSide = ts.visitNode(\n            node.right,\n            visit\n          ) as ts.Expression;\n\n          printNode(transformedLeftSide, debug);\n\n          printNode(transformedRightSide, debug);\n\n          const innerLeftSide = (transformedLeftSide as ts.AwaitExpression)\n            .expression;\n\n          printNode(innerLeftSide, debug);\n\n          const methodCall = (innerLeftSide as ts.AwaitExpression)\n            .expression as ts.CallExpression;\n\n          printNode(methodCall, debug);\n\n          const newCallExpr = ts.factory.createCallExpression(\n            methodCall,\n            methodCall.typeArguments,\n            [createObjectLiteral(transformedRightSide)]\n          );\n\n          printNode(newCallExpr, debug);\n\n          const result = ts.factory.createAwaitExpression(newCallExpr);\n\n          printNode(result, debug);\n          return result;\n        }\n      }\n\n      return ts.visitEachChild(node, visit, context);\n    };\n\n    function isAsyncMockType(type: ts.Type): boolean {\n      if (!type) return false;\n      // Check for error types\n      if (type.flags & ts.TypeFlags.Any || type.flags & ts.TypeFlags.Unknown) {\n        return false;\n      }\n\n      // Check if it's a Promise<AsyncMock>\n      if (type.symbol?.name === \"Promise\") {\n        const typeArguments =\n          type.aliasTypeArguments || (type as any).typeArguments;\n        if (typeArguments && typeArguments.length > 0) {\n          return isAsyncMockType(typeArguments[0]);\n        }\n      }\n\n      // Direct AsyncMock check\n      if (type.symbol?.name === \"AsyncMock\") {\n        return true;\n      }\n\n      // Check if it's a call expression type - using proper bitwise comparison\n      if ((type.flags & ts.TypeFlags.Object) !== 0) {\n        // changed from === true\n        const objType = type as ts.ObjectType;\n        const callSignatures = objType.getCallSignatures();\n        if (callSignatures.length > 0) {\n          const returnType = typeChecker.getReturnTypeOfSignature(\n            callSignatures[0]\n          );\n          return isAsyncMockType(returnType);\n        }\n      }\n\n      // Check if it's a property of AsyncMock\n      const parentType = (type as any).parent;\n      if (parentType?.symbol?.name === \"AsyncMock\") {\n        return true;\n      }\n\n      return false;\n    }\n\n    return (sourceFile) => ts.visitNode(sourceFile, visit) as ts.SourceFile;\n  };\n}\n\nfunction createProgram(compilerHost: ts.CompilerHost) {\n  // Create a program to trigger lib loading\n  const program = ts.createProgram({\n    rootNames: [\"input.ts\"],\n    options: {\n      types: [\"my-runtime-types\"],\n      target: ts.ScriptTarget.ESNext,\n    },\n    host: compilerHost,\n  });\n  return program;\n}\n\nasync function createTypeChecker(\n  sourceCode: string,\n  globalObjectNames: string[],\n  debug: boolean\n): Promise<ts.TypeChecker> {\n  const compilerHost = await createInMemoryCompilerHost(\n    sourceCode,\n    globalObjectNames,\n    debug\n  );\n  const program = createProgram(compilerHost);\n  return program.getTypeChecker();\n}\n\nfunction createObjectLiteral(rightSideExpr: ts.Expression): ts.Expression {\n  return ts.factory.createObjectLiteralExpression([\n    // Create the 'type' property\n    ts.factory.createPropertyAssignment(\n      ts.factory.createStringLiteral('type'),\n      ts.factory.createStringLiteral('assignment')\n    ),\n    // Create the 'value' property with the expression\n    ts.factory.createPropertyAssignment(\n      ts.factory.createStringLiteral('value'),\n      rightSideExpr\n    )\n  ], true); // true for multiline formatting\n}"]}