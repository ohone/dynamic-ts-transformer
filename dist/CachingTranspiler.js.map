{"version":3,"file":"CachingTranspiler.js","sourceRoot":"","sources":["../src/CachingTranspiler.ts"],"names":[],"mappings":"AAAA,wCAAwC;AACxC,OAAO,EAAE,2BAA2B,EAAE,MAAM,iBAAiB,CAAC;AAE9D,MAAM,KAAK,GAAG,IAAI,GAAG,EAAkB,CAAC;AAExC,MAAM,CAAC,KAAK,UAAU,mBAAmB,CACrC,UAAkB,EAClB,SAA8B,EAC9B,mBAA6B,EAAE,EAC/B,sBAAgC,EAAE,EAClC,QAAiB,KAAK,EACtB,YAAqB,IAAI;IAEzB,IAAI,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;QACxB,OAAO,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACjC,CAAC;IACD,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,SAAS,CAAC,CAAC;IAC5C,MAAM,cAAc,GAAG,MAAM,2BAA2B,CAAC,UAAU,EAAE,SAAS,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;IACzI,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IAC1B,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;IACtC,OAAO,cAAc,CAAC;AAC1B,CAAC","sourcesContent":["// alias function to avoid name conflict\nimport { originalTranspileTypescript } from \"./Transpiler.js\";\n\nconst cache = new Map<string, string>();\n\nexport async function transpileTypescript(\n    codeString: string,\n    sourceUrl?: string | undefined,\n    globalProxyNames: string[] = [],\n    globalNonProxyNames: string[] = [],\n    debug: boolean = false,\n    sourceMap: boolean = true\n  ) {\n    if (cache.has(codeString)) {\n        return cache.get(codeString);\n    }\n    console.log(\"Transpiling code:\", sourceUrl);\n    const transpiledCode = await originalTranspileTypescript(codeString, sourceUrl, globalProxyNames, globalNonProxyNames, debug, sourceMap);\n    console.log(\"Transpiled\");\n    cache.set(codeString, transpiledCode);\n    return transpiledCode;\n}"]}